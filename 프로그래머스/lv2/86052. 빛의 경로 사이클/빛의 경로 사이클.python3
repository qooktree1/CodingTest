# 상우하좌 -> 방향대로 
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]


def DFS(x, y, d, visited, grid):
        
        N = len(grid)  # 행
        M = len(grid[0])  # 열
        cnt = 0
        
        while not visited[x][y][d]:
            visited[x][y][d] = 1
            x = (x + dx[d]) % N
            y = (y + dy[d]) % M
            
            if grid[x][y] == 'R':  # 오른쪽으로 방향 이동
                d = (d + 1) % 4
            elif grid[x][y] == 'L':  # 왼쪽으로 방향 이동
                d = (d - 1) % 4
            # S 는 직진이므로 방향 전환 X
            
            cnt += 1  # 이동 한 번 == [길이 += 1]
        # while 문 빠져나올때 == 방문한 곳 + 방향 이면 길이 return
        return cnt

def solution(grid):
    answer = []
    N = len(grid)  # 행
    M = len(grid[0])  # 열
    # S, L, R 하나당 방향 배열 [0] * 4 를 가짐
    visited = [[[0] * 4 for _ in range(M)] for _ in range(N)]
    for i in range(N):
        for j in range(M):
            for d in range(4):  # 모든 방향으로
                if not visited[i][j][d]:
                    answer.append(DFS(i, j, d, visited, grid))
    answer.sort()
    return answer