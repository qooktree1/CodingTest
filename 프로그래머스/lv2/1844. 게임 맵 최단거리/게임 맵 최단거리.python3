from collections import deque
# 상하좌우
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]
def BFS(x, y, maps):
    N = len(maps)
    M = len(maps[0])
    queue = deque([[x, y]])
    visited = [[0] * M for _ in range(N)]
    while queue:
        x, y = queue.popleft()
        if x == N - 1 and y == M - 1:
            return visited[x][y] + 1
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and maps[nx][ny] == 1:
                queue.append([nx, ny])
                visited[nx][ny] = visited[x][y] + 1
    return -1


def solution(maps):
    answer = 0
    return BFS(0, 0, maps)