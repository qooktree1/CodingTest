# heapq
# push, pop 시 자동 정렬한다고 함
import heapq
def solution(scoville, K):
    heapq.heapify(scoville)  # 리스트를 힙으로 만듦(오름차순 정렬)
    cnt = 0
    while len(scoville) >= 2:
        if scoville[0] >= K:
            return cnt
        a = heapq.heappop(scoville)
        b = heapq.heappop(scoville)
        heapq.heappush(scoville, a + b * 2)
        cnt += 1
    if scoville[0] >= K:
        return cnt
    return -1
"""
# 시간초과
from collections import deque
def solution(scoville, K):
    cnt = 0
    scoville.sort()
    scoville = deque(scoville)
    
    while len(scoville) >= 2:
        
        if scoville[0] >= K:
            return cnt
        
        a = scoville.popleft()
        b = scoville.popleft()
        c = a + b * 2
        scoville.append(c)
        cnt += 1
        
        j = -1
        for i in range(len(scoville)-2, -1, -1):
            if scoville[j] < scoville[i]:
                scoville[j], scoville[i] = scoville[i], scoville[j]
                j -= 1
            else:
                break
    if scoville[0] >= K:
        return cnt
    return -1
"""