def solution(triangle):
    max_ = 0
    st = triangle[0][0]
    for i in range(1, len(triangle)):
        for j in range(len(triangle[i])):
            if j == 0:
                triangle[i][j] += triangle[i-1][j]
            elif j == len(triangle[i])-1:
                triangle[i][j] += triangle[i-1][j-1]
            else:
                triangle[i][j] += max(triangle[i-1][j], triangle[i-1][j-1])
    return max(triangle[len(triangle)-1])
        







"""
# DFS 시간 초과
max_ = 0
def dfs(n, triangle, N, ssum, t):
    global max_
    if n == N:
        if max_ < ssum:
            max_ = ssum
        return
    
    
    dfs(n+1, triangle, N, ssum + triangle[n][t], t)
    dfs(n+1, triangle, N, ssum + triangle[n][t+1], t+1)


def solution(triangle):
    global max_
    N = len(triangle)
    dfs(1, triangle, N, triangle[0][0], 0)
    return max_
"""